/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphology-shortest-path";
exports.ids = ["vendor-chunks/graphology-shortest-path"];
exports.modules = {

/***/ "(ssr)/./node_modules/graphology-shortest-path/astar.js":
/*!********************************************************!*\
  !*** ./node_modules/graphology-shortest-path/astar.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Graphology A* Shortest Path\n * ==================================\n *\n * Graphology implementation of A* shortest path for weighted graphs.\n */\nvar isGraph = __webpack_require__(/*! graphology-utils/is-graph */ \"(ssr)/./node_modules/graphology-utils/is-graph.js\");\nvar createEdgeWeightGetter =\n  (__webpack_require__(/*! graphology-utils/getters */ \"(ssr)/./node_modules/graphology-utils/getters.js\").createEdgeWeightGetter);\nvar Heap = __webpack_require__(/*! mnemonist/heap */ \"(ssr)/./node_modules/mnemonist/heap.js\");\n\n/**\n * Defaults & helpers.\n */\nvar DEFAULT_WEIGHT_ATTRIBUTE = 'weight';\n\nfunction ASTAR_HEAP_COMPARATOR(a, b) {\n  if (a[0] > b[0]) return 1;\n  if (a[0] < b[0]) return -1;\n\n  if (a[1] > b[1]) return 1;\n  if (a[1] < b[1]) return -1;\n\n  return 0;\n}\n\n/**\n * Bidirectional A* shortest path between source & target node.\n *\n * Note that this implementation was basically copied from networkx.\n *\n * @param  {Graph}     graph          - The graphology instance.\n * @param  {string}    source         - Source node.\n * @param  {string}    target         - Target node.\n * @param  {?function} getEdgeWeight  - Name of the weight attribute or getter function.\n * @param  {?function} heuristic      - A function to estimate the distance between any node and the target. The function takes two nodes as arguments and must return a number. If the function is omitted, it is evaluated to 0, which is the same as Dijkstra's algorithm\n * @param  {?object}   options        - Options:\n * @param  {?number}     cutoff         - A cutoff value for the evaluation function.\n * @return {array}                    - The found path, if any\n */\nfunction bidirectionalAstar(\n  graph,\n  source,\n  target,\n  getEdgeWeight,\n  heuristic,\n  options\n) {\n  // Sanity checks\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-shortest-path/astar: invalid graphology instance.'\n    );\n\n  if (source && !graph.hasNode(source))\n    throw new Error(\n      'graphology-shortest-path/astar: the \"' +\n        source +\n        '\" source node does not exist in the given graph.'\n    );\n\n  if (target && !graph.hasNode(target))\n    throw new Error(\n      'graphology-shortest-path/astar: the \"' +\n        target +\n        '\" target node does not exist in the given graph.'\n    );\n\n  getEdgeWeight = createEdgeWeightGetter(\n    getEdgeWeight || DEFAULT_WEIGHT_ATTRIBUTE\n  ).fromMinimalEntry;\n\n  if (source === target) return [source];\n\n  heuristic =\n    heuristic ||\n    function () {\n      return 0;\n    };\n\n  options = options || {};\n\n  // The queue stores priority, node, cost to reach, and parent.\n  var count = 0;\n  var queue = new Heap(ASTAR_HEAP_COMPARATOR);\n  queue.push([0, count++, source, 0, null]);\n\n  // Maps enqueued nodes to distance of discovered paths and the\n  // computed heuristics to target. We avoid computing the heuristics\n  // more than once and inserting the node into the queue too many times.\n  var enqueued = {};\n\n  // Maps explored nodes to parent closest to the source.\n  var explored = {};\n\n  var item;\n  var curnode;\n  var entry;\n  var dist;\n  var parent;\n  var path;\n  var node;\n  var qcost;\n  var h;\n  var cost;\n  var ncost;\n  var neighbor;\n\n  function edgeCallback(edge, attr, s, t) {\n    neighbor = curnode === s ? t : s;\n    cost = getEdgeWeight(edge, attr);\n\n    if (cost === null) return;\n\n    ncost = dist + cost;\n\n    if (enqueued.hasOwnProperty(neighbor)) {\n      entry = enqueued[neighbor];\n      qcost = entry[0];\n      h = entry[1];\n\n      // if qcost <= ncost, a less costly path from the\n      // neighbor to the source was already determined.\n      // Therefore, we won't attempt to push this neighbor\n      // to the queue\n      if (qcost <= ncost) return;\n    } else {\n      h = heuristic(neighbor, target);\n    }\n\n    if (options.cutoff && ncost + h > options.cutoff) return;\n\n    enqueued[neighbor] = [ncost, h];\n    queue.push([ncost + h, count++, neighbor, ncost, curnode]);\n  }\n\n  while (queue.size !== 0) {\n    // Pop the smallest item from queue.\n    item = queue.pop();\n    curnode = item[2];\n    dist = item[3];\n    parent = item[4];\n\n    if (curnode === target) {\n      path = [curnode];\n      node = parent;\n      while (node !== null) {\n        path.push(node);\n        node = explored[node];\n      }\n      path.reverse();\n      return path;\n    }\n\n    if (explored.hasOwnProperty(curnode)) {\n      // Do not override the parent of starting node\n      if (explored[curnode] === null) continue;\n\n      // Skip bad paths that were enqueued before finding a better one\n      qcost = enqueued[curnode][0];\n      if (qcost < dist) continue;\n    }\n\n    explored[curnode] = parent;\n\n    graph.forEachOutboundEdge(curnode, edgeCallback);\n  }\n\n  // No path was found\n  return null;\n}\n\n/**\n * Exporting.\n */\nexports.bidirectional = bidirectionalAstar;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS1zaG9ydGVzdC1wYXRoL2FzdGFyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxvRkFBMkI7QUFDakQ7QUFDQSxFQUFFLGdJQUEwRDtBQUM1RCxXQUFXLG1CQUFPLENBQUMsOERBQWdCOztBQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVc7QUFDdkIsWUFBWSxXQUFXO0FBQ3ZCLFlBQVksV0FBVztBQUN2QixZQUFZLFdBQVc7QUFDdkIsWUFBWSxXQUFXO0FBQ3ZCLFlBQVksV0FBVztBQUN2QixZQUFZLGFBQWE7QUFDekIsWUFBWSwwQkFBMEI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2dyYXBob2xvZ3ktc2hvcnRlc3QtcGF0aC9hc3Rhci5qcz8wMDI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR3JhcGhvbG9neSBBKiBTaG9ydGVzdCBQYXRoXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogR3JhcGhvbG9neSBpbXBsZW1lbnRhdGlvbiBvZiBBKiBzaG9ydGVzdCBwYXRoIGZvciB3ZWlnaHRlZCBncmFwaHMuXG4gKi9cbnZhciBpc0dyYXBoID0gcmVxdWlyZSgnZ3JhcGhvbG9neS11dGlscy9pcy1ncmFwaCcpO1xudmFyIGNyZWF0ZUVkZ2VXZWlnaHRHZXR0ZXIgPVxuICByZXF1aXJlKCdncmFwaG9sb2d5LXV0aWxzL2dldHRlcnMnKS5jcmVhdGVFZGdlV2VpZ2h0R2V0dGVyO1xudmFyIEhlYXAgPSByZXF1aXJlKCdtbmVtb25pc3QvaGVhcCcpO1xuXG4vKipcbiAqIERlZmF1bHRzICYgaGVscGVycy5cbiAqL1xudmFyIERFRkFVTFRfV0VJR0hUX0FUVFJJQlVURSA9ICd3ZWlnaHQnO1xuXG5mdW5jdGlvbiBBU1RBUl9IRUFQX0NPTVBBUkFUT1IoYSwgYikge1xuICBpZiAoYVswXSA+IGJbMF0pIHJldHVybiAxO1xuICBpZiAoYVswXSA8IGJbMF0pIHJldHVybiAtMTtcblxuICBpZiAoYVsxXSA+IGJbMV0pIHJldHVybiAxO1xuICBpZiAoYVsxXSA8IGJbMV0pIHJldHVybiAtMTtcblxuICByZXR1cm4gMDtcbn1cblxuLyoqXG4gKiBCaWRpcmVjdGlvbmFsIEEqIHNob3J0ZXN0IHBhdGggYmV0d2VlbiBzb3VyY2UgJiB0YXJnZXQgbm9kZS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBpbXBsZW1lbnRhdGlvbiB3YXMgYmFzaWNhbGx5IGNvcGllZCBmcm9tIG5ldHdvcmt4LlxuICpcbiAqIEBwYXJhbSAge0dyYXBofSAgICAgZ3JhcGggICAgICAgICAgLSBUaGUgZ3JhcGhvbG9neSBpbnN0YW5jZS5cbiAqIEBwYXJhbSAge3N0cmluZ30gICAgc291cmNlICAgICAgICAgLSBTb3VyY2Ugbm9kZS5cbiAqIEBwYXJhbSAge3N0cmluZ30gICAgdGFyZ2V0ICAgICAgICAgLSBUYXJnZXQgbm9kZS5cbiAqIEBwYXJhbSAgez9mdW5jdGlvbn0gZ2V0RWRnZVdlaWdodCAgLSBOYW1lIG9mIHRoZSB3ZWlnaHQgYXR0cmlidXRlIG9yIGdldHRlciBmdW5jdGlvbi5cbiAqIEBwYXJhbSAgez9mdW5jdGlvbn0gaGV1cmlzdGljICAgICAgLSBBIGZ1bmN0aW9uIHRvIGVzdGltYXRlIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIGFueSBub2RlIGFuZCB0aGUgdGFyZ2V0LiBUaGUgZnVuY3Rpb24gdGFrZXMgdHdvIG5vZGVzIGFzIGFyZ3VtZW50cyBhbmQgbXVzdCByZXR1cm4gYSBudW1iZXIuIElmIHRoZSBmdW5jdGlvbiBpcyBvbWl0dGVkLCBpdCBpcyBldmFsdWF0ZWQgdG8gMCwgd2hpY2ggaXMgdGhlIHNhbWUgYXMgRGlqa3N0cmEncyBhbGdvcml0aG1cbiAqIEBwYXJhbSAgez9vYmplY3R9ICAgb3B0aW9ucyAgICAgICAgLSBPcHRpb25zOlxuICogQHBhcmFtICB7P251bWJlcn0gICAgIGN1dG9mZiAgICAgICAgIC0gQSBjdXRvZmYgdmFsdWUgZm9yIHRoZSBldmFsdWF0aW9uIGZ1bmN0aW9uLlxuICogQHJldHVybiB7YXJyYXl9ICAgICAgICAgICAgICAgICAgICAtIFRoZSBmb3VuZCBwYXRoLCBpZiBhbnlcbiAqL1xuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEFzdGFyKFxuICBncmFwaCxcbiAgc291cmNlLFxuICB0YXJnZXQsXG4gIGdldEVkZ2VXZWlnaHQsXG4gIGhldXJpc3RpYyxcbiAgb3B0aW9uc1xuKSB7XG4gIC8vIFNhbml0eSBjaGVja3NcbiAgaWYgKCFpc0dyYXBoKGdyYXBoKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZ3JhcGhvbG9neS1zaG9ydGVzdC1wYXRoL2FzdGFyOiBpbnZhbGlkIGdyYXBob2xvZ3kgaW5zdGFuY2UuJ1xuICAgICk7XG5cbiAgaWYgKHNvdXJjZSAmJiAhZ3JhcGguaGFzTm9kZShzb3VyY2UpKVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdncmFwaG9sb2d5LXNob3J0ZXN0LXBhdGgvYXN0YXI6IHRoZSBcIicgK1xuICAgICAgICBzb3VyY2UgK1xuICAgICAgICAnXCIgc291cmNlIG5vZGUgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGdpdmVuIGdyYXBoLidcbiAgICApO1xuXG4gIGlmICh0YXJnZXQgJiYgIWdyYXBoLmhhc05vZGUodGFyZ2V0KSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZ3JhcGhvbG9neS1zaG9ydGVzdC1wYXRoL2FzdGFyOiB0aGUgXCInICtcbiAgICAgICAgdGFyZ2V0ICtcbiAgICAgICAgJ1wiIHRhcmdldCBub2RlIGRvZXMgbm90IGV4aXN0IGluIHRoZSBnaXZlbiBncmFwaC4nXG4gICAgKTtcblxuICBnZXRFZGdlV2VpZ2h0ID0gY3JlYXRlRWRnZVdlaWdodEdldHRlcihcbiAgICBnZXRFZGdlV2VpZ2h0IHx8IERFRkFVTFRfV0VJR0hUX0FUVFJJQlVURVxuICApLmZyb21NaW5pbWFsRW50cnk7XG5cbiAgaWYgKHNvdXJjZSA9PT0gdGFyZ2V0KSByZXR1cm4gW3NvdXJjZV07XG5cbiAgaGV1cmlzdGljID1cbiAgICBoZXVyaXN0aWMgfHxcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9O1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIFRoZSBxdWV1ZSBzdG9yZXMgcHJpb3JpdHksIG5vZGUsIGNvc3QgdG8gcmVhY2gsIGFuZCBwYXJlbnQuXG4gIHZhciBjb3VudCA9IDA7XG4gIHZhciBxdWV1ZSA9IG5ldyBIZWFwKEFTVEFSX0hFQVBfQ09NUEFSQVRPUik7XG4gIHF1ZXVlLnB1c2goWzAsIGNvdW50KyssIHNvdXJjZSwgMCwgbnVsbF0pO1xuXG4gIC8vIE1hcHMgZW5xdWV1ZWQgbm9kZXMgdG8gZGlzdGFuY2Ugb2YgZGlzY292ZXJlZCBwYXRocyBhbmQgdGhlXG4gIC8vIGNvbXB1dGVkIGhldXJpc3RpY3MgdG8gdGFyZ2V0LiBXZSBhdm9pZCBjb21wdXRpbmcgdGhlIGhldXJpc3RpY3NcbiAgLy8gbW9yZSB0aGFuIG9uY2UgYW5kIGluc2VydGluZyB0aGUgbm9kZSBpbnRvIHRoZSBxdWV1ZSB0b28gbWFueSB0aW1lcy5cbiAgdmFyIGVucXVldWVkID0ge307XG5cbiAgLy8gTWFwcyBleHBsb3JlZCBub2RlcyB0byBwYXJlbnQgY2xvc2VzdCB0byB0aGUgc291cmNlLlxuICB2YXIgZXhwbG9yZWQgPSB7fTtcblxuICB2YXIgaXRlbTtcbiAgdmFyIGN1cm5vZGU7XG4gIHZhciBlbnRyeTtcbiAgdmFyIGRpc3Q7XG4gIHZhciBwYXJlbnQ7XG4gIHZhciBwYXRoO1xuICB2YXIgbm9kZTtcbiAgdmFyIHFjb3N0O1xuICB2YXIgaDtcbiAgdmFyIGNvc3Q7XG4gIHZhciBuY29zdDtcbiAgdmFyIG5laWdoYm9yO1xuXG4gIGZ1bmN0aW9uIGVkZ2VDYWxsYmFjayhlZGdlLCBhdHRyLCBzLCB0KSB7XG4gICAgbmVpZ2hib3IgPSBjdXJub2RlID09PSBzID8gdCA6IHM7XG4gICAgY29zdCA9IGdldEVkZ2VXZWlnaHQoZWRnZSwgYXR0cik7XG5cbiAgICBpZiAoY29zdCA9PT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgbmNvc3QgPSBkaXN0ICsgY29zdDtcblxuICAgIGlmIChlbnF1ZXVlZC5oYXNPd25Qcm9wZXJ0eShuZWlnaGJvcikpIHtcbiAgICAgIGVudHJ5ID0gZW5xdWV1ZWRbbmVpZ2hib3JdO1xuICAgICAgcWNvc3QgPSBlbnRyeVswXTtcbiAgICAgIGggPSBlbnRyeVsxXTtcblxuICAgICAgLy8gaWYgcWNvc3QgPD0gbmNvc3QsIGEgbGVzcyBjb3N0bHkgcGF0aCBmcm9tIHRoZVxuICAgICAgLy8gbmVpZ2hib3IgdG8gdGhlIHNvdXJjZSB3YXMgYWxyZWFkeSBkZXRlcm1pbmVkLlxuICAgICAgLy8gVGhlcmVmb3JlLCB3ZSB3b24ndCBhdHRlbXB0IHRvIHB1c2ggdGhpcyBuZWlnaGJvclxuICAgICAgLy8gdG8gdGhlIHF1ZXVlXG4gICAgICBpZiAocWNvc3QgPD0gbmNvc3QpIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IGhldXJpc3RpYyhuZWlnaGJvciwgdGFyZ2V0KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jdXRvZmYgJiYgbmNvc3QgKyBoID4gb3B0aW9ucy5jdXRvZmYpIHJldHVybjtcblxuICAgIGVucXVldWVkW25laWdoYm9yXSA9IFtuY29zdCwgaF07XG4gICAgcXVldWUucHVzaChbbmNvc3QgKyBoLCBjb3VudCsrLCBuZWlnaGJvciwgbmNvc3QsIGN1cm5vZGVdKTtcbiAgfVxuXG4gIHdoaWxlIChxdWV1ZS5zaXplICE9PSAwKSB7XG4gICAgLy8gUG9wIHRoZSBzbWFsbGVzdCBpdGVtIGZyb20gcXVldWUuXG4gICAgaXRlbSA9IHF1ZXVlLnBvcCgpO1xuICAgIGN1cm5vZGUgPSBpdGVtWzJdO1xuICAgIGRpc3QgPSBpdGVtWzNdO1xuICAgIHBhcmVudCA9IGl0ZW1bNF07XG5cbiAgICBpZiAoY3Vybm9kZSA9PT0gdGFyZ2V0KSB7XG4gICAgICBwYXRoID0gW2N1cm5vZGVdO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICAgIHBhdGgucHVzaChub2RlKTtcbiAgICAgICAgbm9kZSA9IGV4cGxvcmVkW25vZGVdO1xuICAgICAgfVxuICAgICAgcGF0aC5yZXZlcnNlKCk7XG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG5cbiAgICBpZiAoZXhwbG9yZWQuaGFzT3duUHJvcGVydHkoY3Vybm9kZSkpIHtcbiAgICAgIC8vIERvIG5vdCBvdmVycmlkZSB0aGUgcGFyZW50IG9mIHN0YXJ0aW5nIG5vZGVcbiAgICAgIGlmIChleHBsb3JlZFtjdXJub2RlXSA9PT0gbnVsbCkgY29udGludWU7XG5cbiAgICAgIC8vIFNraXAgYmFkIHBhdGhzIHRoYXQgd2VyZSBlbnF1ZXVlZCBiZWZvcmUgZmluZGluZyBhIGJldHRlciBvbmVcbiAgICAgIHFjb3N0ID0gZW5xdWV1ZWRbY3Vybm9kZV1bMF07XG4gICAgICBpZiAocWNvc3QgPCBkaXN0KSBjb250aW51ZTtcbiAgICB9XG5cbiAgICBleHBsb3JlZFtjdXJub2RlXSA9IHBhcmVudDtcblxuICAgIGdyYXBoLmZvckVhY2hPdXRib3VuZEVkZ2UoY3Vybm9kZSwgZWRnZUNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIE5vIHBhdGggd2FzIGZvdW5kXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEV4cG9ydGluZy5cbiAqL1xuZXhwb3J0cy5iaWRpcmVjdGlvbmFsID0gYmlkaXJlY3Rpb25hbEFzdGFyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphology-shortest-path/astar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphology-shortest-path/dijkstra.js":
/*!***********************************************************!*\
  !*** ./node_modules/graphology-shortest-path/dijkstra.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Graphology Dijkstra Shortest Path\n * ==================================\n *\n * Graphology implementation of Dijkstra shortest path for weighted graphs.\n */\nvar isGraph = __webpack_require__(/*! graphology-utils/is-graph */ \"(ssr)/./node_modules/graphology-utils/is-graph.js\");\nvar createEdgeWeightGetter =\n  (__webpack_require__(/*! graphology-utils/getters */ \"(ssr)/./node_modules/graphology-utils/getters.js\").createEdgeWeightGetter);\nvar Heap = __webpack_require__(/*! mnemonist/heap */ \"(ssr)/./node_modules/mnemonist/heap.js\");\n\n/**\n * Defaults & helpers.\n */\nvar DEFAULT_WEIGHT_ATTRIBUTE = 'weight';\n\nfunction DIJKSTRA_HEAP_COMPARATOR(a, b) {\n  if (a[0] > b[0]) return 1;\n  if (a[0] < b[0]) return -1;\n\n  if (a[1] > b[1]) return 1;\n  if (a[1] < b[1]) return -1;\n\n  if (a[2] > b[2]) return 1;\n  if (a[2] < b[2]) return -1;\n\n  return 0;\n}\n\nfunction BRANDES_DIJKSTRA_HEAP_COMPARATOR(a, b) {\n  if (a[0] > b[0]) return 1;\n  if (a[0] < b[0]) return -1;\n\n  if (a[1] > b[1]) return 1;\n  if (a[1] < b[1]) return -1;\n\n  if (a[2] > b[2]) return 1;\n  if (a[2] < b[2]) return -1;\n\n  if (a[3] > b[3]) return 1;\n  if (a[3] < b[3]) return -1;\n\n  return 0;\n}\n\n/**\n * Bidirectional Dijkstra shortest path between source & target node abstract.\n *\n * Note that this implementation was basically copied from networkx.\n *\n * @param  {Graph}  graph         - The graphology instance.\n * @param  {string} source        - Source node.\n * @param  {string} target        - Target node.\n * @param  {string} getEdgeWeight - Name of the weight attribute or getter function.\n * @param  {array}                - The found path if any and its cost.\n */\nfunction abstractBidirectionalDijkstra(graph, source, target, getEdgeWeight) {\n  source = '' + source;\n  target = '' + target;\n\n  // Sanity checks\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-shortest-path/dijkstra: invalid graphology instance.'\n    );\n\n  if (source && !graph.hasNode(source))\n    throw new Error(\n      'graphology-shortest-path/dijkstra: the \"' +\n        source +\n        '\" source node does not exist in the given graph.'\n    );\n\n  if (target && !graph.hasNode(target))\n    throw new Error(\n      'graphology-shortest-path/dijkstra: the \"' +\n        target +\n        '\" target node does not exist in the given graph.'\n    );\n\n  getEdgeWeight = createEdgeWeightGetter(\n    getEdgeWeight || DEFAULT_WEIGHT_ATTRIBUTE\n  ).fromMinimalEntry;\n\n  if (source === target) return [0, [source]];\n\n  var distances = [{}, {}],\n    paths = [{}, {}],\n    fringe = [\n      new Heap(DIJKSTRA_HEAP_COMPARATOR),\n      new Heap(DIJKSTRA_HEAP_COMPARATOR)\n    ],\n    seen = [{}, {}];\n\n  paths[0][source] = [source];\n  paths[1][target] = [target];\n\n  seen[0][source] = 0;\n  seen[1][target] = 0;\n\n  var finalPath = [],\n    finalDistance = Infinity;\n\n  var count = 0,\n    dir = 1,\n    item,\n    edges,\n    cost,\n    d,\n    v,\n    u,\n    e,\n    i,\n    l;\n\n  fringe[0].push([0, count++, source]);\n  fringe[1].push([0, count++, target]);\n\n  while (fringe[0].size && fringe[1].size) {\n    // Swapping direction\n    dir = 1 - dir;\n\n    item = fringe[dir].pop();\n    d = item[0];\n    v = item[2];\n\n    if (v in distances[dir]) continue;\n\n    distances[dir][v] = d;\n\n    // Shortest path is found?\n    if (v in distances[1 - dir]) return [finalDistance, finalPath];\n\n    edges = dir === 1 ? graph.inboundEdges(v) : graph.outboundEdges(v);\n\n    for (i = 0, l = edges.length; i < l; i++) {\n      e = edges[i];\n      u = graph.opposite(v, e);\n      cost = distances[dir][v] + getEdgeWeight(e, graph.getEdgeAttributes(e));\n\n      if (u in distances[dir] && cost < distances[dir][u]) {\n        throw Error(\n          'graphology-shortest-path/dijkstra: contradictory paths found. Do some of your edges have a negative weight?'\n        );\n      } else if (!(u in seen[dir]) || cost < seen[dir][u]) {\n        seen[dir][u] = cost;\n        fringe[dir].push([cost, count++, u]);\n        paths[dir][u] = paths[dir][v].concat(u);\n\n        if (u in seen[0] && u in seen[1]) {\n          d = seen[0][u] + seen[1][u];\n\n          if (finalPath.length === 0 || finalDistance > d) {\n            finalDistance = d;\n            finalPath = paths[0][u].concat(paths[1][u].slice(0, -1).reverse());\n          }\n        }\n      }\n    }\n  }\n\n  // No path was found\n  return [Infinity, null];\n}\n\n/**\n * Multisource Dijkstra shortest path abstract function. This function is the\n * basis of the algorithm that every other will use.\n *\n * Note that this implementation was basically copied from networkx.\n * TODO: it might be more performant to use a dedicated objet for the heap's\n * items.\n *\n * @param  {Graph}  graph         - The graphology instance.\n * @param  {array}  sources       - A list of sources.\n * @param  {string} getEdgeWeight - Name of the weight attribute or getter function.\n * @param  {number} cutoff        - Maximum depth of the search.\n * @param  {string} target        - Optional target to reach.\n * @param  {object} paths         - Optional paths object to maintain.\n * @return {object}               - Returns the paths.\n */\nfunction abstractDijkstraMultisource(\n  graph,\n  sources,\n  getEdgeWeight,\n  cutoff,\n  target,\n  paths\n) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-shortest-path/dijkstra: invalid graphology instance.'\n    );\n\n  if (target && !graph.hasNode(target))\n    throw new Error(\n      'graphology-shortest-path/dijkstra: the \"' +\n        target +\n        '\" target node does not exist in the given graph.'\n    );\n\n  getEdgeWeight = createEdgeWeightGetter(\n    getEdgeWeight || DEFAULT_WEIGHT_ATTRIBUTE\n  ).fromMinimalEntry;\n\n  var distances = {},\n    seen = {},\n    fringe = new Heap(DIJKSTRA_HEAP_COMPARATOR);\n\n  var count = 0,\n    edges,\n    item,\n    cost,\n    v,\n    u,\n    e,\n    d,\n    i,\n    j,\n    l,\n    m;\n\n  for (i = 0, l = sources.length; i < l; i++) {\n    v = sources[i];\n    seen[v] = 0;\n    fringe.push([0, count++, v]);\n\n    if (paths) paths[v] = [v];\n  }\n\n  while (fringe.size) {\n    item = fringe.pop();\n    d = item[0];\n    v = item[2];\n\n    if (v in distances) continue;\n\n    distances[v] = d;\n\n    if (v === target) break;\n\n    edges = graph.outboundEdges(v);\n\n    for (j = 0, m = edges.length; j < m; j++) {\n      e = edges[j];\n      u = graph.opposite(v, e);\n      cost = getEdgeWeight(e, graph.getEdgeAttributes(e)) + distances[v];\n\n      if (cutoff && cost > cutoff) continue;\n\n      if (u in distances && cost < distances[u]) {\n        throw Error(\n          'graphology-shortest-path/dijkstra: contradictory paths found. Do some of your edges have a negative weight?'\n        );\n      } else if (!(u in seen) || cost < seen[u]) {\n        seen[u] = cost;\n        fringe.push([cost, count++, u]);\n\n        if (paths) paths[u] = paths[v].concat(u);\n      }\n    }\n  }\n\n  return distances;\n}\n\n/**\n * Single source Dijkstra shortest path between given node & other nodes in\n * the graph.\n *\n * @param  {Graph}  graph         - The graphology instance.\n * @param  {string} source        - Source node.\n * @param  {string} getEdgeWeight - Name of the weight attribute or getter function.\n * @return {object}               - An object of found paths.\n */\nfunction singleSourceDijkstra(graph, source, getEdgeWeight) {\n  var paths = {};\n\n  abstractDijkstraMultisource(graph, [source], getEdgeWeight, 0, null, paths);\n\n  return paths;\n}\n\nfunction bidirectionalDijkstra(graph, source, target, getEdgeWeight) {\n  return abstractBidirectionalDijkstra(graph, source, target, getEdgeWeight)[1];\n}\n\n/**\n * Function using Ulrik Brandes' method to map single source shortest paths\n * from selected node.\n *\n * [Reference]:\n * Ulrik Brandes: A Faster Algorithm for Betweenness Centrality.\n * Journal of Mathematical Sociology 25(2):163-177, 2001.\n *\n * @param  {Graph}  graph         - Target graph.\n * @param  {any}    source        - Source node.\n * @param  {string} getEdgeWeight - Name of the weight attribute or getter function.\n * @return {array}                - [Stack, Paths, Sigma]\n */\nfunction brandes(graph, source, getEdgeWeight) {\n  source = '' + source;\n\n  getEdgeWeight = createEdgeWeightGetter(\n    getEdgeWeight || DEFAULT_WEIGHT_ATTRIBUTE\n  ).fromMinimalEntry;\n\n  var S = [],\n    P = {},\n    sigma = {};\n\n  var nodes = graph.nodes(),\n    edges,\n    item,\n    pred,\n    dist,\n    cost,\n    v,\n    w,\n    e,\n    i,\n    l;\n\n  for (i = 0, l = nodes.length; i < l; i++) {\n    v = nodes[i];\n    P[v] = [];\n    sigma[v] = 0;\n  }\n\n  var D = {};\n\n  sigma[source] = 1;\n\n  var seen = {};\n  seen[source] = 0;\n\n  var count = 0;\n\n  var Q = new Heap(BRANDES_DIJKSTRA_HEAP_COMPARATOR);\n  Q.push([0, count++, source, source]);\n\n  while (Q.size) {\n    item = Q.pop();\n    dist = item[0];\n    pred = item[2];\n    v = item[3];\n\n    if (v in D) continue;\n\n    sigma[v] += sigma[pred];\n    S.push(v);\n    D[v] = dist;\n\n    edges = graph.outboundEdges(v);\n\n    for (i = 0, l = edges.length; i < l; i++) {\n      e = edges[i];\n      w = graph.opposite(v, e);\n      cost = dist + getEdgeWeight(e, graph.getEdgeAttributes(e));\n\n      if (!(w in D) && (!(w in seen) || cost < seen[w])) {\n        seen[w] = cost;\n        Q.push([cost, count++, v, w]);\n        sigma[w] = 0;\n        P[w] = [v];\n      } else if (cost === seen[w]) {\n        sigma[w] += sigma[v];\n        P[w].push(v);\n      }\n    }\n  }\n\n  return [S, P, sigma];\n}\n\n/**\n * Exporting.\n */\nexports.bidirectional = bidirectionalDijkstra;\nexports.singleSource = singleSourceDijkstra;\nexports.brandes = brandes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphology-shortest-path/dijkstra.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphology-shortest-path/index.js":
/*!********************************************************!*\
  !*** ./node_modules/graphology-shortest-path/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Graphology Shortest Path\n * =========================\n *\n * Library endpoint.\n */\nvar unweighted = __webpack_require__(/*! ./unweighted.js */ \"(ssr)/./node_modules/graphology-shortest-path/unweighted.js\");\nvar utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/graphology-shortest-path/utils.js\");\n\nexports.unweighted = unweighted;\nexports.dijkstra = __webpack_require__(/*! ./dijkstra.js */ \"(ssr)/./node_modules/graphology-shortest-path/dijkstra.js\");\nexports.astar = __webpack_require__(/*! ./astar.js */ \"(ssr)/./node_modules/graphology-shortest-path/astar.js\");\n\nexports.bidirectional = unweighted.bidirectional;\nexports.singleSource = unweighted.singleSource;\nexports.singleSourceLength = unweighted.singleSourceLength;\nexports.undirectedSingleSourceLength = unweighted.undirectedSingleSourceLength;\nexports.brandes = unweighted.brandes;\n\nexports.edgePathFromNodePath = utils.edgePathFromNodePath;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS1zaG9ydGVzdC1wYXRoL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBTyxDQUFDLG9GQUFpQjtBQUMxQyxZQUFZLG1CQUFPLENBQUMsMEVBQVk7O0FBRWhDLGtCQUFrQjtBQUNsQix3SEFBMkM7QUFDM0MsK0dBQXFDOztBQUVyQyxxQkFBcUI7QUFDckIsb0JBQW9CO0FBQ3BCLDBCQUEwQjtBQUMxQixvQ0FBb0M7QUFDcEMsZUFBZTs7QUFFZiw0QkFBNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS1zaG9ydGVzdC1wYXRoL2luZGV4LmpzP2QxMzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHcmFwaG9sb2d5IFNob3J0ZXN0IFBhdGhcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBMaWJyYXJ5IGVuZHBvaW50LlxuICovXG52YXIgdW53ZWlnaHRlZCA9IHJlcXVpcmUoJy4vdW53ZWlnaHRlZC5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy5qcycpO1xuXG5leHBvcnRzLnVud2VpZ2h0ZWQgPSB1bndlaWdodGVkO1xuZXhwb3J0cy5kaWprc3RyYSA9IHJlcXVpcmUoJy4vZGlqa3N0cmEuanMnKTtcbmV4cG9ydHMuYXN0YXIgPSByZXF1aXJlKCcuL2FzdGFyLmpzJyk7XG5cbmV4cG9ydHMuYmlkaXJlY3Rpb25hbCA9IHVud2VpZ2h0ZWQuYmlkaXJlY3Rpb25hbDtcbmV4cG9ydHMuc2luZ2xlU291cmNlID0gdW53ZWlnaHRlZC5zaW5nbGVTb3VyY2U7XG5leHBvcnRzLnNpbmdsZVNvdXJjZUxlbmd0aCA9IHVud2VpZ2h0ZWQuc2luZ2xlU291cmNlTGVuZ3RoO1xuZXhwb3J0cy51bmRpcmVjdGVkU2luZ2xlU291cmNlTGVuZ3RoID0gdW53ZWlnaHRlZC51bmRpcmVjdGVkU2luZ2xlU291cmNlTGVuZ3RoO1xuZXhwb3J0cy5icmFuZGVzID0gdW53ZWlnaHRlZC5icmFuZGVzO1xuXG5leHBvcnRzLmVkZ2VQYXRoRnJvbU5vZGVQYXRoID0gdXRpbHMuZWRnZVBhdGhGcm9tTm9kZVBhdGg7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphology-shortest-path/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphology-shortest-path/unweighted.js":
/*!*************************************************************!*\
  !*** ./node_modules/graphology-shortest-path/unweighted.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Graphology Unweighted Shortest Path\n * ====================================\n *\n * Basic algorithms to find the shortest paths between nodes in a graph\n * whose edges are not weighted.\n */\nvar isGraph = __webpack_require__(/*! graphology-utils/is-graph */ \"(ssr)/./node_modules/graphology-utils/is-graph.js\");\nvar Queue = __webpack_require__(/*! mnemonist/queue */ \"(ssr)/./node_modules/mnemonist/queue.js\");\nvar extend = __webpack_require__(/*! @yomguithereal/helpers/extend */ \"(ssr)/./node_modules/@yomguithereal/helpers/extend.js\");\n\n/**\n * Function attempting to find the shortest path in a graph between\n * given source & target or `null` if such a path does not exist.\n *\n * @param  {Graph}      graph  - Target graph.\n * @param  {any}        source - Source node.\n * @param  {any}        target - Target node.\n * @return {array|null}        - Found path or `null`.\n */\nfunction bidirectional(graph, source, target) {\n  if (!isGraph(graph))\n    throw new Error('graphology-shortest-path: invalid graphology instance.');\n\n  if (arguments.length < 3)\n    throw new Error(\n      'graphology-shortest-path: invalid number of arguments. Expecting at least 3.'\n    );\n\n  if (!graph.hasNode(source))\n    throw new Error(\n      'graphology-shortest-path: the \"' +\n        source +\n        '\" source node does not exist in the given graph.'\n    );\n\n  if (!graph.hasNode(target))\n    throw new Error(\n      'graphology-shortest-path: the \"' +\n        target +\n        '\" target node does not exist in the given graph.'\n    );\n\n  source = '' + source;\n  target = '' + target;\n\n  // TODO: do we need a self loop to go there?\n  if (source === target) {\n    return [source];\n  }\n\n  // Binding functions\n  var getPredecessors = graph.inboundNeighbors.bind(graph),\n    getSuccessors = graph.outboundNeighbors.bind(graph);\n\n  var predecessor = {},\n    successor = {};\n\n  // Predecessor & successor\n  predecessor[source] = null;\n  successor[target] = null;\n\n  // Fringes\n  var forwardFringe = [source],\n    reverseFringe = [target],\n    currentFringe,\n    node,\n    neighbors,\n    neighbor,\n    i,\n    j,\n    l,\n    m;\n\n  var found = false;\n\n  outer: while (forwardFringe.length && reverseFringe.length) {\n    if (forwardFringe.length <= reverseFringe.length) {\n      currentFringe = forwardFringe;\n      forwardFringe = [];\n\n      for (i = 0, l = currentFringe.length; i < l; i++) {\n        node = currentFringe[i];\n        neighbors = getSuccessors(node);\n\n        for (j = 0, m = neighbors.length; j < m; j++) {\n          neighbor = neighbors[j];\n\n          if (!(neighbor in predecessor)) {\n            forwardFringe.push(neighbor);\n            predecessor[neighbor] = node;\n          }\n\n          if (neighbor in successor) {\n            // Path is found!\n            found = true;\n            break outer;\n          }\n        }\n      }\n    } else {\n      currentFringe = reverseFringe;\n      reverseFringe = [];\n\n      for (i = 0, l = currentFringe.length; i < l; i++) {\n        node = currentFringe[i];\n        neighbors = getPredecessors(node);\n\n        for (j = 0, m = neighbors.length; j < m; j++) {\n          neighbor = neighbors[j];\n\n          if (!(neighbor in successor)) {\n            reverseFringe.push(neighbor);\n            successor[neighbor] = node;\n          }\n\n          if (neighbor in predecessor) {\n            // Path is found!\n            found = true;\n            break outer;\n          }\n        }\n      }\n    }\n  }\n\n  if (!found) return null;\n\n  var path = [];\n\n  while (neighbor) {\n    path.unshift(neighbor);\n    neighbor = predecessor[neighbor];\n  }\n\n  neighbor = successor[path[path.length - 1]];\n\n  while (neighbor) {\n    path.push(neighbor);\n    neighbor = successor[neighbor];\n  }\n\n  return path.length ? path : null;\n}\n\n/**\n * Function attempting to find the shortest path in the graph between the\n * given source node & all the other nodes.\n *\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @return {object}        - The map of found paths.\n */\n\n// TODO: cutoff option\nfunction singleSource(graph, source) {\n  if (!isGraph(graph))\n    throw new Error('graphology-shortest-path: invalid graphology instance.');\n\n  if (arguments.length < 2)\n    throw new Error(\n      'graphology-shortest-path: invalid number of arguments. Expecting at least 2.'\n    );\n\n  if (!graph.hasNode(source))\n    throw new Error(\n      'graphology-shortest-path: the \"' +\n        source +\n        '\" source node does not exist in the given graph.'\n    );\n\n  source = '' + source;\n\n  var nextLevel = {},\n    paths = {},\n    currentLevel,\n    neighbors,\n    v,\n    w,\n    i,\n    l;\n\n  nextLevel[source] = true;\n  paths[source] = [source];\n\n  while (Object.keys(nextLevel).length) {\n    currentLevel = nextLevel;\n    nextLevel = {};\n\n    for (v in currentLevel) {\n      neighbors = graph.outboundNeighbors(v);\n\n      for (i = 0, l = neighbors.length; i < l; i++) {\n        w = neighbors[i];\n\n        if (!paths[w]) {\n          paths[w] = paths[v].concat(w);\n          nextLevel[w] = true;\n        }\n      }\n    }\n  }\n\n  return paths;\n}\n\n/**\n * Function attempting to find the shortest path lengths in the graph between\n * the given source node & all the other nodes.\n *\n * @param  {string} method - Neighbor collection method name.\n * @param  {Graph}  graph  - Target graph.\n * @param  {any}    source - Source node.\n * @return {object}        - The map of found path lengths.\n */\n\n// TODO: cutoff option\nfunction asbtractSingleSourceLength(method, graph, source) {\n  if (!isGraph(graph))\n    throw new Error('graphology-shortest-path: invalid graphology instance.');\n\n  if (!graph.hasNode(source))\n    throw new Error(\n      'graphology-shortest-path: the \"' +\n        source +\n        '\" source node does not exist in the given graph.'\n    );\n\n  source = '' + source;\n\n  // Performing BFS to count shortest paths\n  var seen = new Set();\n\n  var lengths = {},\n    level = 0;\n\n  lengths[source] = 0;\n\n  var currentLevel = [source];\n\n  var i, l, node;\n\n  while (currentLevel.length !== 0) {\n    var nextLevel = [];\n\n    for (i = 0, l = currentLevel.length; i < l; i++) {\n      node = currentLevel[i];\n\n      if (seen.has(node)) continue;\n\n      seen.add(node);\n      extend(nextLevel, graph[method](node));\n\n      lengths[node] = level;\n    }\n\n    level++;\n    currentLevel = nextLevel;\n  }\n\n  return lengths;\n}\n\nvar singleSourceLength = asbtractSingleSourceLength.bind(\n  null,\n  'outboundNeighbors'\n);\nvar undirectedSingleSourceLength = asbtractSingleSourceLength.bind(\n  null,\n  'neighbors'\n);\n\n/**\n * Function using Ulrik Brandes' method to map single source shortest paths\n * from selected node.\n *\n * [Reference]:\n * Ulrik Brandes: A Faster Algorithm for Betweenness Centrality.\n * Journal of Mathematical Sociology 25(2):163-177, 2001.\n *\n * @param  {Graph}  graph      - Target graph.\n * @param  {any}    source     - Source node.\n * @return {array}             - [Stack, Paths, Sigma]\n */\nfunction brandes(graph, source) {\n  source = '' + source;\n\n  var S = [],\n    P = {},\n    sigma = {};\n\n  var nodes = graph.nodes(),\n    Dv,\n    sigmav,\n    neighbors,\n    v,\n    w,\n    i,\n    j,\n    l,\n    m;\n\n  for (i = 0, l = nodes.length; i < l; i++) {\n    v = nodes[i];\n    P[v] = [];\n    sigma[v] = 0;\n  }\n\n  var D = {};\n\n  sigma[source] = 1;\n  D[source] = 0;\n\n  var queue = Queue.of(source);\n\n  while (queue.size) {\n    v = queue.dequeue();\n    S.push(v);\n\n    Dv = D[v];\n    sigmav = sigma[v];\n\n    neighbors = graph.outboundNeighbors(v);\n\n    for (j = 0, m = neighbors.length; j < m; j++) {\n      w = neighbors[j];\n\n      if (!(w in D)) {\n        queue.enqueue(w);\n        D[w] = Dv + 1;\n      }\n\n      if (D[w] === Dv + 1) {\n        sigma[w] += sigmav;\n        P[w].push(v);\n      }\n    }\n  }\n\n  return [S, P, sigma];\n}\n\n/**\n * Exporting.\n */\nexports.bidirectional = bidirectional;\nexports.singleSource = singleSource;\nexports.singleSourceLength = singleSourceLength;\nexports.undirectedSingleSourceLength = undirectedSingleSourceLength;\nexports.brandes = brandes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphology-shortest-path/unweighted.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphology-shortest-path/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/graphology-shortest-path/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Graphology Shortest Path Utils\n * ===============================\n *\n * Miscellaneous shortest-path helper functions.\n */\nvar returnTrue = function () {\n  return true;\n};\n\nexports.edgePathFromNodePath = function (graph, nodePath) {\n  var l = nodePath.length;\n\n  var i, source, target, edge;\n\n  // Self loops\n  if (l < 2) {\n    source = nodePath[0];\n\n    edge = graph.multi\n      ? graph.findEdge(source, source, returnTrue)\n      : graph.edge(source, source);\n\n    if (edge) return [edge];\n\n    return [];\n  }\n\n  l--;\n\n  var edgePath = new Array(l);\n\n  for (i = 0; i < l; i++) {\n    source = nodePath[i];\n    target = nodePath[i + 1];\n\n    edge = graph.multi\n      ? graph.findOutboundEdge(source, target, returnTrue)\n      : graph.edge(source, target);\n\n    if (edge === undefined)\n      throw new Error(\n        'graphology-shortest-path: given path is impossible in given graph.'\n      );\n\n    edgePath[i] = edge;\n  }\n\n  return edgePath;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS1zaG9ydGVzdC1wYXRoL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLGNBQWMsT0FBTztBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvZ3JhcGhvbG9neS1zaG9ydGVzdC1wYXRoL3V0aWxzLmpzPzE0ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHcmFwaG9sb2d5IFNob3J0ZXN0IFBhdGggVXRpbHNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBNaXNjZWxsYW5lb3VzIHNob3J0ZXN0LXBhdGggaGVscGVyIGZ1bmN0aW9ucy5cbiAqL1xudmFyIHJldHVyblRydWUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcblxuZXhwb3J0cy5lZGdlUGF0aEZyb21Ob2RlUGF0aCA9IGZ1bmN0aW9uIChncmFwaCwgbm9kZVBhdGgpIHtcbiAgdmFyIGwgPSBub2RlUGF0aC5sZW5ndGg7XG5cbiAgdmFyIGksIHNvdXJjZSwgdGFyZ2V0LCBlZGdlO1xuXG4gIC8vIFNlbGYgbG9vcHNcbiAgaWYgKGwgPCAyKSB7XG4gICAgc291cmNlID0gbm9kZVBhdGhbMF07XG5cbiAgICBlZGdlID0gZ3JhcGgubXVsdGlcbiAgICAgID8gZ3JhcGguZmluZEVkZ2Uoc291cmNlLCBzb3VyY2UsIHJldHVyblRydWUpXG4gICAgICA6IGdyYXBoLmVkZ2Uoc291cmNlLCBzb3VyY2UpO1xuXG4gICAgaWYgKGVkZ2UpIHJldHVybiBbZWRnZV07XG5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBsLS07XG5cbiAgdmFyIGVkZ2VQYXRoID0gbmV3IEFycmF5KGwpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBzb3VyY2UgPSBub2RlUGF0aFtpXTtcbiAgICB0YXJnZXQgPSBub2RlUGF0aFtpICsgMV07XG5cbiAgICBlZGdlID0gZ3JhcGgubXVsdGlcbiAgICAgID8gZ3JhcGguZmluZE91dGJvdW5kRWRnZShzb3VyY2UsIHRhcmdldCwgcmV0dXJuVHJ1ZSlcbiAgICAgIDogZ3JhcGguZWRnZShzb3VyY2UsIHRhcmdldCk7XG5cbiAgICBpZiAoZWRnZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnZ3JhcGhvbG9neS1zaG9ydGVzdC1wYXRoOiBnaXZlbiBwYXRoIGlzIGltcG9zc2libGUgaW4gZ2l2ZW4gZ3JhcGguJ1xuICAgICAgKTtcblxuICAgIGVkZ2VQYXRoW2ldID0gZWRnZTtcbiAgfVxuXG4gIHJldHVybiBlZGdlUGF0aDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphology-shortest-path/utils.js\n");

/***/ })

};
;